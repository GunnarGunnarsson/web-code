'use strict';


	/* eslint-disable */
	var isServer = true;
	

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var mime = _interopDefault(require('mime'));
var renderFileList = _interopDefault(require('./render-file-list.js'));
var __ws_js = require('./ws.js');

/* global Map, Set, Promise, fs, isServer */
/* eslint no-var: 0, no-console: 0 */
/* eslint-env es6 */

// Map to prevent duplicate data objects for each file
var pathToDataMap = new Map();

var fsFromFn = ['isFile', 'isDirectory', 'isBlockDevice', 'isCharacterDevice', 'isSymbolicLink', 'isFIFO', 'isSocket'];
var fsStatic = [
	'dev',
	'mode',
	'nlink',
	'uid',
	'gid',
	'rdev',
	'blksize',
	'ino',
	'size',
	'blocks',
	'atime',
	'mtime',
	'ctime',
	'birthtime',
	'path'
];
var keys = fsStatic.concat(fsFromFn);


/**
 * Special type of singleton which returns the same object for each path.
 */
function Stats (data) {
	if (pathToDataMap.has(data.path)) {
		var existing = pathToDataMap.get(data.path);
		existing.update(data);
		return existing;
	}
	this.fileLists = new Set();
	this.data = {};
	this.update(data);
	pathToDataMap.set(data.path, this);
}

Stats.prototype.update = function update(data) {

	var self = this;

	this.data.name = path.basename(data.path);
	this.data.dirName = path.dirname(data.path);
	this.data.extension = path.extname(data.path).toLowerCase();
	this.data.mime = data.isFile ? mime.lookup(data.path) : 'directory';

	keys.forEach(function (key) {
		this.data[key] = data[key];
	}.bind(this));

	if (this.isDirectory() && !this.children) {
		this.children = [];
		this.childrenPopulated = false;
	}

    // Rerender file lists
	if (this.fileLists.size) {
		Array.from(this.fileLists).forEach(function (filelistEl) {
			filelistEl.innerHTML = '';
			self.renderFileList(filelistEl, filelistEl.filelistOptions);
		});
	}
};

Stats.prototype.toDoc = function toDoc() {
	var out = {
		__webStatDoc: true
	};
	keys.forEach(function (key) {
		out[key] = this.data[key];
	}.bind(this));
	return out;
};

Stats.prototype.updateChildren = function () {
	if(!this.isDirectory()) throw Error('Not a directory');

	var self = this;
	return fs.readdir(self.data.path)
	.then(function (arr) {
		return Promise.all(arr.map(function (child) {
			return Stats.fromPath(path.join(self.data.path, child));
		}));
	})
	.then(function (statsArray) {
		self.children.splice(0);
		self.children.push.apply(self.children, statsArray);

		// Let server know	
		if (!isServer) __ws_js.remoteCmd('CLIENT', {
			cmd: 'watchPath',
			arguments: [self.data.path]
		});

		self.update(self.data);

		return self;  
	});
};

Stats.prototype.destroyFileList = function (el) {
	el.stats = undefined;
	this.fileLists.delete(el);
	el.innerHTML = '';
};

Stats.prototype.renderFileList = function (el, options) {

	el.filelistOptions = options;

	el.stats = this;
	this.fileLists.add(el);
	el.dataset.mime = this.data.mime;
	el.dataset.name = this.data.name;
	el.dataset.size = this.data.size;

	renderFileList(el, this.children, options);
};

// add isFile isDirectory etc
fsFromFn.forEach(function (key) {
	Stats.prototype[key] = new Function('return this.data["' + key + '"];');
});

Stats.fromPath = function (path$$1) {
	return fs.stat(path$$1);
};

Stats.fromDoc = function (data) {
	return new Stats(data);
};

Stats.fromNodeStats = function (path$$1, nodeStat) {

	var out = {};

	fsFromFn.forEach(key => out[key] = nodeStat[key]());
	keys.forEach(key => {
		if (typeof nodeStat[key] !== 'function' && typeof nodeStat[key] !== 'object') {
			out[key] = nodeStat[key];
		}
	});

	out.path = path.resolve(path$$1);

	return new Stats(out);
};

module.exports = Stats;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViLWNvZGUtc3RhdHMuY29tcGlsZWQuanMiLCJzb3VyY2VzIjpbIi4uL3N0YXRpYy9zY3JpcHRzL2xpYi93ZWItY29kZS1zdGF0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgTWFwLCBTZXQsIFByb21pc2UsIGZzLCBpc1NlcnZlciAqL1xyXG4vKiBlc2xpbnQgbm8tdmFyOiAwLCBuby1jb25zb2xlOiAwICovXHJcbi8qIGVzbGludC1lbnYgZXM2ICovXHJcblxyXG5pbXBvcnQgeyByZXNvbHZlIGFzIHBhdGhSZXNvbHZlLCBiYXNlbmFtZSwgZGlybmFtZSwgZXh0bmFtZSwgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgbWltZSBmcm9tICdtaW1lJztcclxuaW1wb3J0IHJlbmRlckZpbGVMaXN0IGZyb20gJy4vcmVuZGVyLWZpbGUtbGlzdC5qcyc7XHJcbmltcG9ydCB7IHJlbW90ZUNtZCB9IGZyb20gJy4vd3MuanMnO1xyXG5cclxuLy8gTWFwIHRvIHByZXZlbnQgZHVwbGljYXRlIGRhdGEgb2JqZWN0cyBmb3IgZWFjaCBmaWxlXHJcbnZhciBwYXRoVG9EYXRhTWFwID0gbmV3IE1hcCgpO1xyXG5cclxudmFyIGZzRnJvbUZuID0gWydpc0ZpbGUnLCAnaXNEaXJlY3RvcnknLCAnaXNCbG9ja0RldmljZScsICdpc0NoYXJhY3RlckRldmljZScsICdpc1N5bWJvbGljTGluaycsICdpc0ZJRk8nLCAnaXNTb2NrZXQnXTtcclxudmFyIGZzU3RhdGljID0gW1xyXG5cdCdkZXYnLFxyXG5cdCdtb2RlJyxcclxuXHQnbmxpbmsnLFxyXG5cdCd1aWQnLFxyXG5cdCdnaWQnLFxyXG5cdCdyZGV2JyxcclxuXHQnYmxrc2l6ZScsXHJcblx0J2lubycsXHJcblx0J3NpemUnLFxyXG5cdCdibG9ja3MnLFxyXG5cdCdhdGltZScsXHJcblx0J210aW1lJyxcclxuXHQnY3RpbWUnLFxyXG5cdCdiaXJ0aHRpbWUnLFxyXG5cdCdwYXRoJ1xyXG5dO1xyXG52YXIga2V5cyA9IGZzU3RhdGljLmNvbmNhdChmc0Zyb21Gbik7XHJcblxyXG5cclxuLyoqXHJcbiAqIFNwZWNpYWwgdHlwZSBvZiBzaW5nbGV0b24gd2hpY2ggcmV0dXJucyB0aGUgc2FtZSBvYmplY3QgZm9yIGVhY2ggcGF0aC5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0YXRzIChkYXRhKSB7XHJcblx0aWYgKHBhdGhUb0RhdGFNYXAuaGFzKGRhdGEucGF0aCkpIHtcclxuXHRcdHZhciBleGlzdGluZyA9IHBhdGhUb0RhdGFNYXAuZ2V0KGRhdGEucGF0aCk7XHJcblx0XHRleGlzdGluZy51cGRhdGUoZGF0YSk7XHJcblx0XHRyZXR1cm4gZXhpc3Rpbmc7XHJcblx0fVxyXG5cdHRoaXMuZmlsZUxpc3RzID0gbmV3IFNldCgpO1xyXG5cdHRoaXMuZGF0YSA9IHt9O1xyXG5cdHRoaXMudXBkYXRlKGRhdGEpO1xyXG5cdHBhdGhUb0RhdGFNYXAuc2V0KGRhdGEucGF0aCwgdGhpcyk7XHJcbn1cclxuXHJcblN0YXRzLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoZGF0YSkge1xyXG5cclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdHRoaXMuZGF0YS5uYW1lID0gYmFzZW5hbWUoZGF0YS5wYXRoKTtcclxuXHR0aGlzLmRhdGEuZGlyTmFtZSA9IGRpcm5hbWUoZGF0YS5wYXRoKTtcclxuXHR0aGlzLmRhdGEuZXh0ZW5zaW9uID0gZXh0bmFtZShkYXRhLnBhdGgpLnRvTG93ZXJDYXNlKCk7XHJcblx0dGhpcy5kYXRhLm1pbWUgPSBkYXRhLmlzRmlsZSA/IG1pbWUubG9va3VwKGRhdGEucGF0aCkgOiAnZGlyZWN0b3J5JztcclxuXHJcblx0a2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuXHRcdHRoaXMuZGF0YVtrZXldID0gZGF0YVtrZXldO1xyXG5cdH0uYmluZCh0aGlzKSk7XHJcblxyXG5cdGlmICh0aGlzLmlzRGlyZWN0b3J5KCkgJiYgIXRoaXMuY2hpbGRyZW4pIHtcclxuXHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuXHRcdHRoaXMuY2hpbGRyZW5Qb3B1bGF0ZWQgPSBmYWxzZTtcclxuXHR9XHJcblxyXG4gICAgLy8gUmVyZW5kZXIgZmlsZSBsaXN0c1xyXG5cdGlmICh0aGlzLmZpbGVMaXN0cy5zaXplKSB7XHJcblx0XHRBcnJheS5mcm9tKHRoaXMuZmlsZUxpc3RzKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlbGlzdEVsKSB7XHJcblx0XHRcdGZpbGVsaXN0RWwuaW5uZXJIVE1MID0gJyc7XHJcblx0XHRcdHNlbGYucmVuZGVyRmlsZUxpc3QoZmlsZWxpc3RFbCwgZmlsZWxpc3RFbC5maWxlbGlzdE9wdGlvbnMpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcblxyXG5TdGF0cy5wcm90b3R5cGUudG9Eb2MgPSBmdW5jdGlvbiB0b0RvYygpIHtcclxuXHR2YXIgb3V0ID0ge1xyXG5cdFx0X193ZWJTdGF0RG9jOiB0cnVlXHJcblx0fTtcclxuXHRrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG5cdFx0b3V0W2tleV0gPSB0aGlzLmRhdGFba2V5XTtcclxuXHR9LmJpbmQodGhpcykpO1xyXG5cdHJldHVybiBvdXQ7XHJcbn1cclxuXHJcblN0YXRzLnByb3RvdHlwZS51cGRhdGVDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRpZighdGhpcy5pc0RpcmVjdG9yeSgpKSB0aHJvdyBFcnJvcignTm90IGEgZGlyZWN0b3J5Jyk7XHJcblxyXG5cdHZhciBzZWxmID0gdGhpcztcclxuXHRyZXR1cm4gZnMucmVhZGRpcihzZWxmLmRhdGEucGF0aClcclxuXHQudGhlbihmdW5jdGlvbiAoYXJyKSB7XHJcblx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoYXJyLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcclxuXHRcdFx0cmV0dXJuIFN0YXRzLmZyb21QYXRoKGpvaW4oc2VsZi5kYXRhLnBhdGgsIGNoaWxkKSk7XHJcblx0XHR9KSk7XHJcblx0fSlcclxuXHQudGhlbihmdW5jdGlvbiAoc3RhdHNBcnJheSkge1xyXG5cdFx0c2VsZi5jaGlsZHJlbi5zcGxpY2UoMCk7XHJcblx0XHRzZWxmLmNoaWxkcmVuLnB1c2guYXBwbHkoc2VsZi5jaGlsZHJlbiwgc3RhdHNBcnJheSk7XHJcblxyXG5cdFx0Ly8gTGV0IHNlcnZlciBrbm93XHRcclxuXHRcdGlmICghaXNTZXJ2ZXIpIHJlbW90ZUNtZCgnQ0xJRU5UJywge1xyXG5cdFx0XHRjbWQ6ICd3YXRjaFBhdGgnLFxyXG5cdFx0XHRhcmd1bWVudHM6IFtzZWxmLmRhdGEucGF0aF1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHNlbGYudXBkYXRlKHNlbGYuZGF0YSk7XHJcblxyXG5cdFx0cmV0dXJuIHNlbGY7ICBcclxuXHR9KTtcclxufVxyXG5cclxuU3RhdHMucHJvdG90eXBlLmRlc3Ryb3lGaWxlTGlzdCA9IGZ1bmN0aW9uIChlbCkge1xyXG5cdGVsLnN0YXRzID0gdW5kZWZpbmVkO1xyXG5cdHRoaXMuZmlsZUxpc3RzLmRlbGV0ZShlbCk7XHJcblx0ZWwuaW5uZXJIVE1MID0gJyc7XHJcbn1cclxuXHJcblN0YXRzLnByb3RvdHlwZS5yZW5kZXJGaWxlTGlzdCA9IGZ1bmN0aW9uIChlbCwgb3B0aW9ucykge1xyXG5cclxuXHRlbC5maWxlbGlzdE9wdGlvbnMgPSBvcHRpb25zO1xyXG5cclxuXHRlbC5zdGF0cyA9IHRoaXM7XHJcblx0dGhpcy5maWxlTGlzdHMuYWRkKGVsKTtcclxuXHRlbC5kYXRhc2V0Lm1pbWUgPSB0aGlzLmRhdGEubWltZTtcclxuXHRlbC5kYXRhc2V0Lm5hbWUgPSB0aGlzLmRhdGEubmFtZTtcclxuXHRlbC5kYXRhc2V0LnNpemUgPSB0aGlzLmRhdGEuc2l6ZTtcclxuXHJcblx0cmVuZGVyRmlsZUxpc3QoZWwsIHRoaXMuY2hpbGRyZW4sIG9wdGlvbnMpO1xyXG59XHJcblxyXG4vLyBhZGQgaXNGaWxlIGlzRGlyZWN0b3J5IGV0Y1xyXG5mc0Zyb21Gbi5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuXHRTdGF0cy5wcm90b3R5cGVba2V5XSA9IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMuZGF0YVtcIicgKyBrZXkgKyAnXCJdOycpO1xyXG59KTtcclxuXHJcblN0YXRzLmZyb21QYXRoID0gZnVuY3Rpb24gKHBhdGgpIHtcclxuXHRyZXR1cm4gZnMuc3RhdChwYXRoKTtcclxufVxyXG5cclxuU3RhdHMuZnJvbURvYyA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcblx0cmV0dXJuIG5ldyBTdGF0cyhkYXRhKTtcclxufVxyXG5cclxuU3RhdHMuZnJvbU5vZGVTdGF0cyA9IGZ1bmN0aW9uIChwYXRoLCBub2RlU3RhdCkge1xyXG5cclxuXHR2YXIgb3V0ID0ge307XHJcblxyXG5cdGZzRnJvbUZuLmZvckVhY2goa2V5ID0+IG91dFtrZXldID0gbm9kZVN0YXRba2V5XSgpKTtcclxuXHRrZXlzLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdGlmICh0eXBlb2Ygbm9kZVN0YXRba2V5XSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygbm9kZVN0YXRba2V5XSAhPT0gJ29iamVjdCcpIHtcclxuXHRcdFx0b3V0W2tleV0gPSBub2RlU3RhdFtrZXldO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHRvdXQucGF0aCA9IHBhdGhSZXNvbHZlKHBhdGgpO1xyXG5cclxuXHRyZXR1cm4gbmV3IFN0YXRzKG91dCk7XHJcbn1cclxuIl0sIm5hbWVzIjpbImJhc2VuYW1lIiwiZGlybmFtZSIsImV4dG5hbWUiLCJqb2luIiwicmVtb3RlQ21kIiwicGF0aCIsInBhdGhSZXNvbHZlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBSUEsQUFLQTtBQUNBLElBQUksYUFBYSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7O0FBRTlCLElBQUksUUFBUSxHQUFHLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxD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
